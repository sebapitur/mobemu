/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mobemu.algorithms;

import mobemu.node.Context;
import mobemu.node.Message;
import mobemu.node.Node;

/**
 * Class for a Spray and Wait node.
 *
 * Thrasyvoulos Spyropoulos, Konstantinos Psounis, and Cauligi S. Raghavendra.
 * Spray and wait: an efficient routing scheme for intermittently connected
 * mobile networks. Proceedings of the 2005 ACM SIGCOMM workshop on
 * Delay-tolerant networking, pp. 252-259. ACM, 2005.
 *
 * @author Radu
 */
public class SprayAndWait extends Node {

    private final boolean dissemination;
    private final boolean altruismAnalysis;
    private final Type type;

    /**
     * Instantiates a {@code SprayAndWait} object.
     *
     * @param id ID of the node
     * @param nodes total number of existing nodes
     * @param context the context of this node
     * @param socialNetwork the social network as seen by this node
     * @param dataMemorySize the maximum allowed size of the data memory
     * @param exchangeHistorySize the maximum allowed size of the exchange
     * history
     * @param seed the seed for the random number generators
     * @param traceStart timestamp of the start of the trace
     * @param traceEnd timestamp of the end of the trace
     * @param dissemination {@code true} if dissemination is used, {@code false}
     * if routing is used
     * @param type type of the Spray and Wait algorithm (source or binary)
     * @param altruism {@code true} if altruism computations are performed,
     * {@code false} otherwise
     */
    public SprayAndWait(int id, int nodes, Context context, boolean[] socialNetwork, int dataMemorySize, int exchangeHistorySize,
            long seed, long traceStart, long traceEnd, boolean dissemination, boolean altruism, Type type) {
        super(id, nodes, context, socialNetwork, dataMemorySize, exchangeHistorySize, seed, traceStart, traceEnd);

        this.dissemination = dissemination;
        this.altruismAnalysis = altruism;
        this.type = type;
    }

    @Override
    public String getName() {
        return "Spray and Wait";
    }

    @Override
    protected void onDataExchange(Node encounteredNode, long contactDuration, long currentTime) {
        if (!(encounteredNode instanceof SprayAndWait)) {
            return;
        }

        SprayAndWait sprayAndWaitEncounteredNode = (SprayAndWait) encounteredNode;
        int remainingMessages = deliverDirectMessages(sprayAndWaitEncounteredNode, altruismAnalysis, contactDuration, currentTime, dissemination);
        int totalMessages = 0;

        // download each message in the encountered node's data memory that is not in the current node's memory
        for (Message message : sprayAndWaitEncounteredNode.dataMemory) {
            if (totalMessages >= remainingMessages) {
                return;
            }

            if (!runSprayAndWait(message, sprayAndWaitEncounteredNode.id)) {
                continue;
            }

            if (insertMessage(message, sprayAndWaitEncounteredNode, currentTime, altruismAnalysis, dissemination)) {
                totalMessages++;
            }
        }

        // download each message generated by the encountered node that is not in the current node's memory
        for (Message message : sprayAndWaitEncounteredNode.ownMessages) {
            if (totalMessages >= remainingMessages) {
                return;
            }

            if (!runSprayAndWait(message, sprayAndWaitEncounteredNode.id)) {
                continue;
            }

            if (insertMessage(message, sprayAndWaitEncounteredNode, currentTime, altruismAnalysis, dissemination)) {
                totalMessages++;
            }
        }
    }

    /**
     * Spray and Wait algorithm.
     *
     * @param message message to be analyzed
     * @param encounteredId ID of the encountered node
     * @return {@code true} if the message should be copied, {@code false}
     * otherwise
     */
    private boolean runSprayAndWait(Message message, int encounteredId) {
        // if a single message copy is left, do not send it
        if (message.getCopies(encounteredId) == 1) {
            return false;
        }

        // if the current node doesn't contain the message, it receives
        // one copy from the encountered node for the Source version, or
        // half of the copies for the Binary version
        if (!dataMemory.contains(message) && !ownMessages.contains(message)) {
            message.setCopies(encounteredId, type == Type.SOURCE ? message.getCopies(encounteredId) - 1 : message.getCopies(encounteredId) / 2);
            message.setCopies(id, type == Type.SOURCE ? 1 : message.getCopies(encounteredId));
        }

        return true;
    }

    public enum Type {
        SOURCE, BINARY
    }
}
